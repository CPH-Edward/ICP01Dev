<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="S_LoadLockPumping" Id="{4036cbfa-ea27-42a8-9d84-a2ce3e96b466}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM S_LoadLockPumping
VAR_INPUT
	bInit				:BOOL:=FALSE;// 初始化状态 busy/done/errDone
	bTrig				:BOOL:=FALSE;// 执行触发 信号
	bReset				:BOOL:=FALSE;// 报错 复位
	bPause				:BOOL:=FALSE;// 暂停 运行
	bStop				:BOOL:=FALSE;// 停止 运行
	bAbort				:BOOL:=FALSE;// 中止 运行
	
END_VAR
VAR_OUTPUT
	busy				:BOOL;
	done				:BOOL;
	errDone				:BOOL;
END_VAR
VAR
	actStep				:ActStepBase;
END_VAR
VAR
	i: INT;
	t1:ton;
	t2:ton;
	t3:ton;
	notchoose:BOOL;
	timeOutTime:TIME:=T#120S;
	safecheckTime:TIME:=T#1S;
	pdvOpenflag:BOOL;
	forelineOpenflag:BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[busy:=actStep.isBusy();
done:=actStep.isDone();
errDone:=actStep.isError();
actStep.Act_Pause(pause:=bPause);

IF bTrig THEN
	bTrig:=FALSE;
	IF NOT busy THEN
		actStep.Act_ex();
	END_IF
END_IF

//状态复位
IF bInit THEN
	bInit:=FALSE;
	Act_init_status();
END_IF

IF bAbort OR bStop THEN
	bAbort:=FALSE;
	bStop:=FALSE;
	Act_init_status();
	actStep.toZeroStep();
	gShowLogTextTitle:='NON';
END_IF
ActionRun(tempActStep:=actStep);]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{4594b38b-9b85-4501-9aee-43ad1b6ef708}" />
    <Method Name="Act_Ex" Id="{7be06a6a-1fbb-4159-86d9-c1c4d5e632c1}">
      <Declaration><![CDATA[(*
---Trigger action
*)
METHOD Act_Ex : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT busy THEN
	actStep.Act_ex();
	Act_Ex:=TRUE;
ELSE
	Act_Ex:=FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Act_Init_Status" Id="{3f01338f-f268-498d-8fff-9317524de762}">
      <Declaration><![CDATA[(*
---功能: 状态复位 busy/done/errDone;
*)
METHOD Act_Init_Status
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[actStep.Act_Init();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ActionRun" Id="{6ddc78fe-ec8a-485a-9a1a-e7df8b2077e0}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE ActionRun
VAR_INPUT
	tempActStep:ITFActStep;
END_VAR
VAR
END_VAR
VAR_STAT//此处定义静态变量, 保证每次进入该函数时能够在线监控当前值
	tempStep:DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tempStep:=tempActStep.getStep();
CASE tempStep OF
0:
	IF tempActStep.isEx() THEN
		tempActStep.setBusyFlag();
		tempActStep.toBeginStep();
	END_IF
	t1(IN:= FALSE );
	t2(IN:= FALSE );
	t3(IN:= FALSE );
10:
	gShowLogTextTitle:='Load Lock Pumping';
	IF gRunningState<>RunningStatus.eErrorState THEN
		tempActStep.addStep(10,FALSE);
	ELSE
		error_Trigger(105);
		IF gCtrlMode=ControlMode.eManualCtrMode THEN
			tempActStep.toErrDoneStep();
		END_IF
	END_IF
20:
	IF NOT gICP.ForeLineGauge.error AND gICP.ForeLineGauge.outputValue<gRoughtPumVaccum*10 THEN
		tempActStep.addStep(10,FALSE);
	ELSE
		error_Trigger(107);
		IF gCtrlMode=ControlMode.eManualCtrMode THEN
			tempActStep.toErrDoneStep();
		END_IF
	END_IF
30:
	IF gICP.ForlinLineValveExtRelay THEN
		forelineOpenflag:=TRUE;
	ELSE
		forelineOpenflag:=FALSE;
	END_IF
	IF gICP.PDVOpenSensor THEN
		pdvOpenflag:=TRUE;
	ELSE
		pdvOpenflag:=FALSE;
	END_IF
	tempActStep.toStep(100,FALSE);
100:
	tempActStep.addStep(10,TRUE);
110:
	IF NOT gRoughRemain THEN
		S_RoughPumping.Act_Init_Status();
		S_RoughPumping.Act_Ex();
		tempActStep.addStep(10,FALSE);
	ELSE
		tempActStep.toStep(160,FALSE);
	END_IF
120:
	IF S_RoughPumping.done THEN
		gShowLogTextTitle:='Load Lock Pumping';
		tempActStep.addStep(10,FALSE);
	END_IF
	IF S_RoughPumping.errDone THEN
		tempActStep.toStep(100,FALSE);
	END_IF
130:
	tempActStep.addStep(10,FALSE);
140:
	IF gICP.ForlinLineValve.Act_Retract() AND gICP.PDV.Act_Retract() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:ForeLineValve And PDV Close');
		tempActStep.addStep(10,FALSE);
	END_IF
150:
	IF gICP.ForlinLineValve.Get_Done_Ret() AND gICP.PDV.Get_Done_Ret() AND gICP.PDVCloseSensor THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:ForeLineValve And PDV Close Done');
		tempActStep.toStep(200,FALSE);
	END_IF
160:
	S_ActuatorRecoveryPOU.Act_Init_Status();
	S_ActuatorRecoveryPOU.Act_Ex();
	tempActStep.addStep(10,FALSE);
170:
	IF S_ActuatorRecoveryPOU.done THEN
		tempActStep.addStep(10,FALSE);
	END_IF
180:
	tempActStep.addStep(10,FALSE);
190:
	tempActStep.addStep(10,FALSE);
200:
	tempActStep.addStep(10,TRUE);
210:
	IF gICP.GateDoorValve.Get_Done_Ret() AND gICP.GateDoorRetSensor AND
		gICP.VentValve.Get_Done_Ret() AND NOT gICP.VentExtRelay AND
		gICP.SlowPummingValve.Get_Done_Ret() AND NOT gICP.SlowPummingExtRelay AND
		gICP.FastPummingValve.Get_Done_Ret() AND NOT gICP.FastPummingExtRelay AND
		gICP.ForlinLineValve.Get_Done_Ret() AND NOT gICP.ForlinLineValveExtRelay AND
		gICP.RoughValve.Get_Done_Ret() AND NOT gICP.RoughValveExtRelay  THEN
		tempActStep.addStep(10,FALSE);		
	END_IF
220:
	IF gICP.SlowPummingValve.Act_Extend() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:SlowPummingValve Open');
		tempActStep.addStep(10,FALSE);
	END_IF
230:
	IF gICP.SlowPummingValve.Get_Done_Ext() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:SlowPummingValve Open Done');
		tempActStep.addStep(10,FALSE);
	END_IF
240:
	t2(IN:= gICP.LoadLockGauge.outputValue<gLoadLockPumSVaccum,PT:=safecheckTime );
	IF t2.Q THEN
		t1(IN:= FALSE );
		t2(IN:= FALSE );
		t3(IN:= FALSE );
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append(CONCAT('LLPumping POU Run: Slow Pump Pressure Arrive ',REAL_TO_STRING(gICP.LoadLockGauge.outputValue)));
		tempActStep.addStep(10,FALSE);
		RETURN;
	END_IF
	t1(IN:= TRUE,PT:=timeOutTime );
	IF t1.Q THEN
		t1(IN:= FALSE );
		t2(IN:= FALSE );
		t3(IN:= FALSE );
		error_Trigger(122);
		RETURN;
	END_IF
250:
	tempActStep.addStep(10,TRUE);
260:
	IF gICP.SlowPummingValve.Act_Retract() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:SlowPummingValve Close');
		tempActStep.addStep(10,FALSE);
	END_IF
270:
	IF gICP.SlowPummingValve.Get_Done_Ret() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:SlowPummingValve Close Done');
		tempActStep.addStep(10,FALSE);
	END_IF
280:
	t3(IN:=TRUE,PT:=T#1S);
	IF t3.Q THEN
		t1(IN:= FALSE );
		t2(IN:= FALSE );
		t3(IN:= FALSE );
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append(CONCAT('LLPumping POU Run: Fast Pump Pressure Arrive ',REAL_TO_STRING(gICP.LoadLockGauge.outputValue)));
		tempActStep.addStep(10,FALSE);
	END_IF
290:
	tempActStep.addStep(10,TRUE);
300:
	IF gICP.FastPummingValve.Act_Extend() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:FastPummingValve Open');
		tempActStep.addStep(10,FALSE);
	END_IF
310:
	IF gICP.FastPummingValve.Get_Done_Ext() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:FastPummingValve Open Done');
		tempActStep.addStep(10,FALSE);
	END_IF
320:
	t2(IN:= gICP.LoadLockGauge.outputValue<gRoughtPumVaccum*10,PT:=safecheckTime );
	IF t2.Q THEN
		t1(IN:= FALSE );
		t2(IN:= FALSE );
		t3(IN:= FALSE );
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append(CONCAT('LLPumping POU Run: Fast Pump Pressure Arrive ',REAL_TO_STRING(gICP.LoadLockGauge.outputValue)));
		tempActStep.addStep(10,FALSE);
		RETURN;
	END_IF
	t1(IN:= TRUE,PT:=timeOutTime );
	IF t1.Q THEN
		t1(IN:= FALSE );
		t2(IN:= FALSE );
		t3(IN:= FALSE );
		error_Trigger(122);
		RETURN;
	END_IF
330:
	tempActStep.addStep(10,TRUE);
340:
	IF gICP.FastPummingValve.Act_Retract() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:FastPummingValve Close');
		tempActStep.addStep(10,FALSE);
	END_IF
350:
	IF gICP.FastPummingValve.Get_Done_Ret() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:FastPummingValve Close Done');
		tempActStep.addStep(10,FALSE);
	END_IF
360:
	t3(IN:=TRUE,PT:=T#2S);
	IF t3.Q THEN
		t1(IN:= FALSE );
		t2(IN:= FALSE );
		t3(IN:= FALSE );
		tempActStep.addStep(10,FALSE);
	END_IF
370:
	tempActStep.addStep(10,TRUE);
380:
	IF forelineOpenflag THEN
		IF gICP.ForlinLineValve.Act_Extend() THEN
			gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
			gRunningLog.append('LLPumping POU Run:ForeLineValve Open');
			tempActStep.addStep(10,FALSE);
		END_IF
	ELSE
		tempActStep.toStep(400,FALSE);
	END_IF
	
390:
	IF gICP.ForlinLineValve.Get_Done_Ext() THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:ForeLineValve Open Done');
		tempActStep.addStep(10,FALSE);
	END_IF
400:
	tempActStep.addStep(10,TRUE);
//465:
//	IF gICP.PDV.Act_ChangePos() THEN
//		tempActStep.addStep(2,FALSE);
//	END_IF
//467:
//	IF gICP.PDV.PosMode THEN
//		tempActStep.addStep(3,FALSE);
//	END_IF
410:
	IF pdvOpenflag THEN
		IF gICP.PDV.Act_Open() THEN
			gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
			gRunningLog.append('LLPumping POU Run:PDV Open');
			tempActStep.addStep(10,FALSE);
		END_IF
	ELSE
		tempActStep.toStep(1000,FALSE);
	END_IF
	
420:
	IF gICP.PDV.Get_Done_Ext() OR gICP.PDVCloseSensor THEN
		gRunningLog.append(CONCAT('LLPumping POU Run:',DINT_TO_STRING(tempStep)));
		gRunningLog.append('LLPumping POU Run:PDV Open Done');
		tempActStep.addStep(10,FALSE);
	END_IF
430:
	tempActStep.toStep(1000,FALSE);
1000:
	tempActStep.toDoneStep();

60000://Done
	tempActStep.setDoneFlag();
	tempActStep.toZeroStep();
	
65000://Error
	tempActStep.setErrDoneFlag();
	tempActStep.toZeroStep();
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="S_LoadLockPumping">
      <LineId Id="49" Count="0" />
      <LineId Id="385" Count="2" />
      <LineId Id="406" Count="12" />
      <LineId Id="422" Count="0" />
      <LineId Id="530" Count="1" />
      <LineId Id="489" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="446" Count="0" />
    </LineIds>
    <LineIds Name="S_LoadLockPumping.Act_Ex">
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="S_LoadLockPumping.Act_Init_Status">
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="S_LoadLockPumping.ActionRun">
      <LineId Id="1943" Count="10" />
      <LineId Id="2335" Count="0" />
      <LineId Id="1954" Count="2" />
      <LineId Id="2346" Count="0" />
      <LineId Id="2350" Count="1" />
      <LineId Id="2349" Count="0" />
      <LineId Id="1958" Count="4" />
      <LineId Id="2347" Count="0" />
      <LineId Id="2353" Count="1" />
      <LineId Id="2352" Count="0" />
      <LineId Id="1964" Count="1" />
      <LineId Id="2524" Count="1" />
      <LineId Id="2527" Count="1" />
      <LineId Id="2526" Count="0" />
      <LineId Id="2530" Count="3" />
      <LineId Id="2529" Count="0" />
      <LineId Id="1966" Count="3" />
      <LineId Id="2507" Count="0" />
      <LineId Id="2510" Count="1" />
      <LineId Id="2508" Count="0" />
      <LineId Id="2512" Count="1" />
      <LineId Id="2509" Count="0" />
      <LineId Id="1973" Count="1" />
      <LineId Id="2336" Count="0" />
      <LineId Id="1975" Count="5" />
      <LineId Id="2364" Count="0" />
      <LineId Id="2375" Count="1" />
      <LineId Id="2548" Count="1" />
      <LineId Id="2377" Count="2" />
      <LineId Id="2503" Count="0" />
      <LineId Id="2550" Count="1" />
      <LineId Id="2504" Count="0" />
      <LineId Id="2382" Count="0" />
      <LineId Id="2505" Count="1" />
      <LineId Id="2514" Count="7" />
      <LineId Id="2523" Count="0" />
      <LineId Id="2522" Count="0" />
      <LineId Id="2385" Count="12" />
      <LineId Id="2554" Count="1" />
      <LineId Id="2398" Count="3" />
      <LineId Id="2567" Count="1" />
      <LineId Id="2402" Count="6" />
      <LineId Id="2553" Count="0" />
      <LineId Id="2556" Count="0" />
      <LineId Id="2558" Count="0" />
      <LineId Id="2410" Count="14" />
      <LineId Id="2559" Count="1" />
      <LineId Id="2425" Count="3" />
      <LineId Id="2561" Count="1" />
      <LineId Id="2429" Count="7" />
      <LineId Id="2569" Count="1" />
      <LineId Id="2437" Count="5" />
      <LineId Id="2563" Count="1" />
      <LineId Id="2443" Count="3" />
      <LineId Id="2565" Count="1" />
      <LineId Id="2447" Count="7" />
      <LineId Id="2572" Count="1" />
      <LineId Id="2455" Count="14" />
      <LineId Id="2574" Count="1" />
      <LineId Id="2470" Count="3" />
      <LineId Id="2576" Count="1" />
      <LineId Id="2474" Count="12" />
      <LineId Id="2534" Count="0" />
      <LineId Id="2537" Count="0" />
      <LineId Id="2578" Count="1" />
      <LineId Id="2538" Count="0" />
      <LineId Id="2535" Count="0" />
      <LineId Id="2539" Count="1" />
      <LineId Id="2536" Count="0" />
      <LineId Id="2489" Count="2" />
      <LineId Id="2580" Count="1" />
      <LineId Id="2492" Count="10" />
      <LineId Id="2365" Count="1" />
      <LineId Id="2541" Count="0" />
      <LineId Id="2544" Count="0" />
      <LineId Id="2582" Count="1" />
      <LineId Id="2545" Count="0" />
      <LineId Id="2542" Count="0" />
      <LineId Id="2546" Count="1" />
      <LineId Id="2543" Count="0" />
      <LineId Id="2369" Count="2" />
      <LineId Id="2584" Count="1" />
      <LineId Id="2372" Count="2" />
      <LineId Id="2179" Count="10" />
      <LineId Id="1092" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>