<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="RecipeNameModule_EX" Id="{d35c2f0e-dbf4-4258-b983-326d1dcd0be0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RecipeNameModule_EX
VAR_INPUT
	sFileName						:T_MaxString:='C:\GideonSaveData.csv';//'Hard Disk\IASaveData.csv'  数据文件存储路径
	readB							:BOOL:=FALSE;//读取触发
	saveB							:BOOL:=FALSE;//保存触发
	deleteB							:BOOL:=FALSE;// 删除触发
	dataString						:ARRAY[0..gRecipeNameMAX_CSV_ROWS, 0..gRecipeNameMAX_CSV_COLUMNS ] OF STRING(30);
	pDatabaseHMI					:ARRAY[1..gRecipeNameMAX_CSV_ROWS+1] OF RecipeNamePar;(* Target PLC database *)
	pDatabase						:ARRAY[0..gRecipeNameMAX_CSV_ROWS, 0..gRecipeNameMAX_CSV_COLUMNS ] OF STRING(30);(* Target PLC database *)
	dataStringLength				:UDINT:=99;
END_VAR
VAR_OUTPUT
	busy							:BOOL:=FALSE;
	rDone							:BOOL:=FALSE;
	sDone							:BOOL:=FALSE;
	error							:BOOL:=FALSE;
	errID							:UDINT:=0;
	errTxt							:STRING(255):='';
	outData							:ARRAY [1..gRecipeNameMAX_String_NUM] OF RecipeNamePar; 
END_VAR
VAR_IN_OUT
	
END_VAR
VAR	
	csv_rows						:UDINT:=gRecipeNameMAX_CSV_ROWS;
	csv_columns						:UDINT:=gRecipeNameMAX_CSV_COLUMNS;
	startUpB						:BOOL:=FALSE;
	writeTxt						:P_TextModeWrite_RecipeName;
	readTxt							:P_TextModeRead_RecipeName;
	deleteTxt						:P_TextModeDelete_1;
	fbFileOpen						:FB_FileOpen;//检查文件是否存在
	fbFileClose						:FB_FileClose;(* Closes file *)
	hFile							:UINT:=0;(* File handle of the source file *)
	checkFileExistError				:BOOL;
	initB							:BOOL:=FALSE;
	saveStep						:UINT:=0;
	deleteStep						:UINT:=0;
	readStep						:UINT:=0;
	sFileNameOld					:T_MaxString;//旧文件名
//获取系统时间
	ntGetTime				: NT_GetTime;
	systemTimeStruct		: TIMESTRUCT;
	getSystemTimeStep		: UINT:=0;
	systemTIMEStr			: STRING:='';//系统时间，格式YYYY-MM-DD hh:mm:ss_zzz
	systemTIMEStr2			: STRING:='';//系统时间，格式YYYYMMDDhhmmss
	sysTIMEStrYY			: STRING:='';//系统时间，年
	sysTIMEStrMM			: STRING:='';//系统时间，月
	sysTIMEStrDD			: STRING:='';//系统时间，日
	sysTIMEStr_HH			: STRING:='';//系统时间，时
	sysTIMEStr_mm			: STRING:='';//系统时间，分
	sysTIMEStr_ss			: STRING:='';//系统时间，秒
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF dataStringLength>gRecipeNameMAX_String_NUM THEN
	dataStringLength:=gRecipeNameMAX_String_NUM;
END_IF


csv_rows:=dataStringLength + 1;
IF csv_rows>gRecipeNameMAX_CSV_ROWS THEN
	csv_rows:=gRecipeNameMAX_CSV_ROWS;
END_IF

//judge length
IF gRecipeNameMAX_CSV_ROWS<(dataStringLength+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF
IF csv_rows<(dataStringLength+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF

init();
IF initB THEN
	readMethod();
	saveMethod();
END_IF
getSystemTime();
]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{9d242169-e008-4ce7-9b56-60c56d284fa9}" />
    <Folder Name="Public" Id="{a3b26640-bf3d-4078-970b-4b429f91e182}" />
    <Method Name="createDir" Id="{bd5c4b56-3802-4d39-8200-c85499146afd}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE createDir : BOOL
VAR
	sPathNameTemp	: T_MaxString := 'C:\TwinCAT\Data.txt';
	sDriveTemp		: STRING(3);
	sDirTemp		: T_MaxString;
	sFileNameTemp	: T_MaxString;
	sExtTemp		: T_MaxString;
	bSuccess		: BOOL;
	fbCreateDir		: FB_CreateDir;
	fbCreateDir2	: FB_CreateDir;
	sFileDirTemp	: T_MaxString;
	sFileDirTemp2	: T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sPathNameTemp:=sFileName;
bSuccess := F_SplitPathName( sPathName := sPathNameTemp,
	sDrive := sDriveTemp,
	sDir := sDirTemp,
	sFileName := sFileNameTemp,
	sExt := sExtTemp );
IF bSuccess THEN
	bSuccess:=FALSE;
	IF LEFT(sDirTemp,LEN(sDirTemp)-1) <> '' THEN
		//sFileDirTemp:=CONCAT(STR1:=sDriveTemp,STR2:=LEFT(sDirTemp,LEN(sDirTemp)-1));
		//sFileNameOld:=CONCAT(STR1:=sFileDirTemp,STR2:=CONCAT('\',CONCAT(sFileNameTemp,'_Old.csv')));//用于重命名参数文件
		sFileDirTemp:='';
		sFileDirTemp:=CONCAT(sFileDirTemp,sDriveTemp);
		sFileDirTemp:=CONCAT(sFileDirTemp,LEFT(sDirTemp,LEN(sDirTemp)-1));
		sFileDirTemp2:='';
		sFileDirTemp2:=CONCAT(sFileDirTemp2,sFileDirTemp);
		sFileDirTemp2:=CONCAT(sFileDirTemp2,'\Old');
		
		sFileNameOld:='';
		sFileNameOld:=CONCAT(sFileNameOld,sFileDirTemp);
		sFileNameOld:=CONCAT(sFileNameOld,'\Old\');//'\'
		sFileNameOld:=CONCAT(sFileNameOld,sFileNameTemp);
		sFileNameOld:=CONCAT(sFileNameOld,'_Old_');
		sFileNameOld:=CONCAT(sFileNameOld,systemTIMEStr2);
		sFileNameOld:=CONCAT(sFileNameOld,'.csv');
		
		fbCreateDir(
			sNetId:= , 
			sPathName:= sFileDirTemp, 
			ePath:= PATH_GENERIC, 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
		fbCreateDir2(
			sNetId:= , 
			sPathName:= sFileDirTemp2, 
			ePath:= PATH_GENERIC, 
			bExecute:= TRUE, 
			tTimeout:= , 
			bBusy=> , 
			bError=> , 
			nErrId=> );
	END_IF
END_IF
fbCreateDir(
	sNetId:= , 
	sPathName:= , 
	ePath:= , 
	bExecute:= FALSE, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );
fbCreateDir2(
	sNetId:= , 
	sPathName:= , 
	ePath:= , 
	bExecute:= FALSE, 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="data2String" Id="{843bd5c4-e61d-40ee-97f6-25aab5c5aedf}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE data2String : BOOL
VAR_INPUT
END_VAR
VAR
	i:UDINT:=0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//judge length
IF gRecipeNameMAX_CSV_ROWS<(gRecipeNameMAX_String_NUM+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF
IF csv_rows<(dataStringLength+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF


//bool
FOR i:=0 TO dataStringLength DO
	pDatabase[i+1,0]:=TO_STRING(i);//num
	pDatabase[i+1,1]:=gRecipeNameSelect[i+1].Name;//Name
	pDatabase[i+1,2]:='1';;//ID
	pDatabase[i+1,3]:='Null';//Par1
	pDatabase[i+1,4]:='Null';//Par2
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="deleteMethod" Id="{612cbd11-1819-422d-926d-3e4cc92e64df}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE deleteMethod : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE deleteStep OF
0:
	IF deleteB AND (NOT busy) THEN
		deleteStep:=1;
		deleteB:=FALSE;
		busy:=TRUE;
		sDone:=FALSE;
		error:=FALSE;
		errID:=0;
		errTxt:='';
	END_IF

1:
	deleteStep:=2;

2:
	deleteTxt(
	bDelete:=TRUE , 
	sFileName:=sFileName , 
	sFileNameOld:= , 
	bBusy=> , 
	error=> , 
	nErrId=> );	
	deleteStep:=3;

3:
	deleteTxt.bDelete:=FALSE;
	
	IF error THEN
		deleteStep:=110;
		RETURN;
	END_IF

	IF NOT writeTxt.bBusy THEN
		deleteStep:=100;
	END_IF

100:
	busy:=FALSE;
	sDone:=TRUE;
	error:=error;
	errID:=errID;
	errTxt:=errTxt;

	IF NOT deleteB THEN
		deleteStep:=0;
	END_IF

110:
	busy:=FALSE;
	sDone:=FALSE;
	error:=TRUE;
	errID:=errID;
	errTxt:='save data fail';

	IF NOT deleteB THEN
		deleteStep:=0;
	END_IF
END_CASE
deleteTxt(
	bDelete:= , 
	sFileName:=sFileName , 
	sFileNameOld:= , 
	bBusy=> , 
	error=> , 
	nErrId=> );]]></ST>
      </Implementation>
    </Method>
    <Method Name="deleteSlector" Id="{12d904f5-35ee-45f4-8eec-b61454ac3126}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD deleteSlector : BOOL
VAR_INPUT
	recipeSelect					:ARRAY [1..10] OF STRING;
	inidex							:INT;
END_VAR
VAR_OUTPUT
	error:BOOL;
	outrecipeSelect					:ARRAY [1..10] OF STRING;
END_VAR
VAR
	itemp:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[outrecipeSelect:=recipeSelect;
IF inidex>0 AND inidex<=gRecipeSelctMaxIndex THEN
	FOR itemp:=inidex TO gRecipeSelctMaxIndex-1 BY 1 DO
		outrecipeSelect[itemp]:=outrecipeSelect[itemp+1];
	END_FOR
	outrecipeSelect[gRecipeSelctMaxIndex]:='';
	error:=FALSE;
ELSE
	error:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getSystemTime" Id="{135e7390-430d-47c9-ae70-be19d514fdac}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE getSystemTime : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//获取本地系统时间--输出到变量 systemTIMEStr
CASE getSystemTimeStep OF
0:
	ntGetTime(
		NETID:= , 
		START:= FALSE, 
		TMOUT:= , 
		BUSY=> , 
		ERR=> , 
		ERRID=> , 
		TIMESTR=> systemTimeStruct);
	IF NOT ntGetTime.BUSY AND NOT ntGetTime.ERR THEN
		getSystemTimeStep:=getSystemTimeStep+1;
	END_IF
1:
	ntGetTime(
		NETID:= , 
		START:= TRUE, 
		TMOUT:= , 
		BUSY=> , 
		ERR=> , 
		ERRID=> , 
		TIMESTR=> systemTimeStruct);
	IF NOT ntGetTime.BUSY AND NOT ntGetTime.ERR THEN
		systemTIMEStr:=SYSTEMTIME_TO_STRING(systemTimeStruct);//系统时间转成字符串格式
		
		sysTIMEStrYY:=WORD_TO_DECSTR(in:=systemTimeStruct.wYear,iPrecision:=4);
		sysTIMEStrMM:=WORD_TO_DECSTR(in:=systemTimeStruct.wMonth,iPrecision:=2);
		sysTIMEStrDD:=WORD_TO_DECSTR(in:=systemTimeStruct.wDay,iPrecision:=2);
		sysTIMEStr_HH:=WORD_TO_DECSTR(in:=systemTimeStruct.wHour,iPrecision:=2);
		sysTIMEStr_mm:=WORD_TO_DECSTR(in:=systemTimeStruct.wMinute,iPrecision:=2);
		sysTIMEStr_ss:=WORD_TO_DECSTR(in:=systemTimeStruct.wSecond,iPrecision:=2);
		
		systemTIMEStr2:='';
		systemTIMEStr2:=CONCAT(systemTIMEStr2,sysTIMEStrYY);
		systemTIMEStr2:=CONCAT(systemTIMEStr2,sysTIMEStrMM);
		systemTIMEStr2:=CONCAT(systemTIMEStr2,sysTIMEStrDD);
		systemTIMEStr2:=CONCAT(systemTIMEStr2,sysTIMEStr_HH);
		systemTIMEStr2:=CONCAT(systemTIMEStr2,sysTIMEStr_mm);
		systemTIMEStr2:=CONCAT(systemTIMEStr2,sysTIMEStr_ss);
		
		getSystemTimeStep:=0;
	ELSIF ntGetTime.ERR THEN
		systemTIMEStr:='';
		getSystemTimeStep:=0;
	END_IF	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="getValue" Id="{21cc23e5-0630-4af9-9b9e-44994448b4bc}" FolderPath="Public\">
      <Declaration><![CDATA[METHOD getValue : BOOL
VAR_IN_OUT
	value:STRING;
END_VAR
VAR_INPUT
	cnum:UDINT;
	rnum:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF 0<=rnum AND rnum<=dataStringLength
	AND 0<=cnum AND cnum<=gRecipeMAX_CSV_COLUMNS THEN
	value:=pDatabase[rnum,cnum];
	getValue:=TRUE;
ELSE
	value:='';
	getValue:=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{e711cf09-23bb-42a5-8d8a-e2c9118e9463}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE init : BOOL
VAR_INPUT
END_VAR
VAR
	i:UDINT:=0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//创建生成初始表格
//judge length
IF gRecipeNameMAX_CSV_ROWS<(gRecipeNameMAX_String_NUM+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF
IF csv_rows<(dataStringLength+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF


IF initB AND (NOT busy) THEN
	RETURN;
END_IF
initB:=TRUE;

//header
	pDatabase[0,0]:='NUM';//NUM
	pDatabase[0,1]:='RecipeName';//Name
	pDatabase[0,2]:='RecipeID';//ID
	pDatabase[0,3]:='Par1';//Par1
	pDatabase[0,4]:='Par2';//Par2
	
(*--- 不在此处填充，转移到保存数据时填充
//bool
FOR i:=1 TO (dataBoolLength+1) DO
	//pDatabase[i,0]:=UDINT_TO_STRING(i-1);//NUM  --- 不在此处填充
	//pDatabase[i,1]:='BOOL';//data type --- 不在此处填充
	//pDatabase[i,2]:='';//name
	//pDatabase[i,3]:=BOOL_TO_STRING(FALSE);//value
	//pDatabase[i,4]:='';//no use
END_FOR

//dint
FOR i:=(dataBoolLength+2) TO (dataBoolLength+2+dataDintLength) DO
	//pDatabase[i,0]:=UDINT_TO_STRING(i-(dataBoolLength+2));//NUM  --- 不在此处填充
	//pDatabase[i,1]:='DINT';//data type --- 不在此处填充
	//pDatabase[i,2]:='';//name
	//pDatabase[i,3]:=DINT_TO_STRING(0);//value
	//pDatabase[i,4]:='';//no use
END_FOR

//lreal
FOR i:=(dataBoolLength+dataDintLength+3) TO (dataBoolLength+dataDintLength+dataLrealLength+3) DO
	//pDatabase[i,0]:=UDINT_TO_STRING(i-(dataBoolLength+dataDintLength+3));//NUM  --- 不在此处填充
	//pDatabase[i,1]:='LREAL';//data type --- 不在此处填充
	//pDatabase[i,2]:='';//name
	//pDatabase[i,3]:=DINT_TO_STRING(0);//value
	//pDatabase[i,4]:='';//no use
END_FOR
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="readMethod" Id="{e4229677-2dfc-4a20-90b5-2bef72f42646}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE readMethod : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE readStep OF
0:
	IF (readB OR (NOT startUPb)) AND (NOT busy) THEN
		readStep:=1;
		startUPb:=TRUE;//for first time, 
		readB:=FALSE;
		rDone:=FALSE;
		busy:=TRUE;
		error:=FALSE;
		errID:=0;
		errTxt:='';
		fbFileOpen(bExecute:= FALSE);
		checkFileExistError:=FALSE;
	END_IF
	
1:
	fbFileOpen(
		sNetId:= , 
		sPathName:= sFileName, 
		nMode:= FOPEN_MODEREAD, 
		ePath:= PATH_GENERIC, 
		bExecute:= TRUE, 
		tTimeout:= , 
		bBusy=> , 
		bError=> , 
		nErrId=> , 
		hFile=> hFile);
	IF NOT fbFileOpen.bBusy THEN
		IF fbFileOpen.bError THEN
			checkFileExistError:=TRUE;
		END_IF
		fbFileOpen(bExecute:= FALSE);
		readStep:=2;
	END_IF
	fbFileClose(bExecute:= FALSE);
2:
	fbFileClose(
		sNetId:= , 
		hFile:= hFile, 
		bExecute:= TRUE, 
		tTimeout:= , 
		bBusy=> , 
		bError=> , 
		nErrId=> );
	IF NOT fbFileClose.bBusy THEN
		IF checkFileExistError THEN
			readStep:=110;
		ELSE
			readStep:=11;
		END_IF
		fbFileClose(bExecute:= FALSE);
	END_IF

11:
	//read txt to Database
	readTxt(
		database:= pDatabase, 
		csv_rows:= csv_rows, 
		csv_columns:= csv_columns, 
		bRead:= TRUE, 
		sFileName:= sFileName);
	readStep:=12;

12:
	readTxt(
		database:= pDatabase, 
		csv_rows:= csv_rows, 
		csv_columns:= csv_columns, 
		bRead:= FALSE, 
		sFileName:= sFileName,
		Error=>error,
		nErrId=>errID);
		
	IF error THEN
		readStep:=110;
		RETURN;
	END_IF
	
	IF NOT readTxt.bBusy THEN
		readStep:=13;
	END_IF
	
13:
	string2Data();
	readStep:=100;
	
100:
	rDone:=TRUE;
	busy:=FALSE;
	error:=error;
	errID:=errID;
	errTxt:=errTxt;
	IF NOT readB THEN
		readStep:=0;
	END_IF	


110:
	rDone:=FALSE;
	busy:=FALSE;
	error:=TRUE;
	errID:=errID;
	errTxt:='read data fail';	
	IF NOT readB THEN
		readStep:=0;
	END_IF		
	gRecipeSelectIndex1:=1;
END_CASE



]]></ST>
      </Implementation>
    </Method>
    <Method Name="saveMethod" Id="{f58d283f-b336-4260-acbf-315273ebdefd}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE saveMethod : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE saveStep OF
0:
	IF saveB AND (NOT busy) THEN
		saveStep:=1;
		saveB:=FALSE;
		busy:=TRUE;
		sDone:=FALSE;
		error:=FALSE;
		errID:=0;
		errTxt:='';
	END_IF

1:
	createDir();
	data2String();
	saveStep:=2;

2:
	writeTxt(
		database:= pDatabase, 
		csv_rows:= csv_rows, 
		csv_columns:= csv_columns, 
		bWrite:= TRUE, 
		sFileName:= sFileName,
		sFileNameOld:= sFileNameOld);	
	saveStep:=3;

3:
	writeTxt(
		database:= pDatabase, 
		csv_rows:= csv_rows, 
		csv_columns:= csv_columns, 
		bWrite:= FALSE, 
		sFileName:= sFileName,
		sFileNameOld:= sFileNameOld,
		Error=>error,
		nErrID=>errID);	
	
	IF error THEN
		saveStep:=110;
		RETURN;
	END_IF

	IF NOT writeTxt.bBusy THEN
		saveStep:=100;
	END_IF

100:
	busy:=FALSE;
	sDone:=TRUE;
	error:=error;
	errID:=errID;
	errTxt:=errTxt;

	IF NOT saveB THEN
		saveStep:=0;
	END_IF

110:
	busy:=FALSE;
	sDone:=FALSE;
	error:=TRUE;
	errID:=errID;
	errTxt:='save data fail';

	IF NOT saveB THEN
		saveStep:=0;
	END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="setValue" Id="{8f62716a-2d3a-4d83-a18b-c4efb4bb2778}" FolderPath="Public\">
      <Declaration><![CDATA[METHOD setValue : BOOL
VAR_INPUT
	value:STRING;
END_VAR
VAR_INPUT
	rnum:UDINT;
	cnum:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF 0<=rnum AND rnum<=dataStringLength
	AND 0<=cnum AND cnum<=gRecipeMAX_CSV_COLUMNS THEN
	pDatabase[rnum,cnum]:=value;
	setValue:=TRUE;
ELSE
	setValue:=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="string2Data" Id="{a6512b70-da6d-4b16-aa41-598546f74742}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE string2Data : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT:=0;
	index_temp:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//judge length
IF gRecipeNameMAX_CSV_ROWS<(gRecipeNameMAX_String_NUM+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF
IF csv_rows<(dataStringLength+1) THEN
	error:=TRUE;
	errTxt:='dataBase$'s length too short';
	RETURN;
END_IF

(*
//bool
FOR i:=0 TO dataBoolLength DO
	dataBool[i]:=STRING_TO_BOOL(pDatabase[i+1,3]);//value
END_FOR

//dint
FOR i:=(dataBoolLength+1) TO (dataBoolLength+1+dataDintLength) DO
	dataDint[i-(dataBoolLength+1)]:=STRING_TO_DINT(pDatabase[i+1,3]);//value
END_FOR

//lreal
FOR i:=(dataBoolLength+dataDintLength+2) TO (dataBoolLength+dataDintLength+dataLrealLength+2) DO
	dataLreal[i-(dataBoolLength+dataDintLength+2)]:=STRING_TO_LREAL(pDatabase[i+1,3]);//value
END_FOR
*)
FOR i:=0 TO UDINT_TO_INT(gRecipeNameMAX_CSV_ROWS)  DO
	dataString[i,0]:=(pDatabase[i,0]);
	dataString[i,1]:=(pDatabase[i,1]);
	dataString[i,2]:=(pDatabase[i,2]);
	dataString[i,3]:=(pDatabase[i,3]);
	dataString[i,4]:=(pDatabase[i,4]);
	
	
	IF i<UDINT_TO_INT(gRecipeNameMAX_CSV_ROWS) THEN
		gRecipeSelectStruct[i+1].NUM:=(pDatabase[i+1,0]);
		gRecipeSelectStruct[i+1].Name:=(pDatabase[i+1,1]);
		gRecipeSelectStruct[i+1].ID:=(pDatabase[i+1,2]);
		gRecipeSelectStruct[i+1].Note1:=(pDatabase[i+1,3]);
		gRecipeSelectStruct[i+1].Note2:=(pDatabase[i+1,4]);
		
		gRecipeNameSelect[i+1].Name:=gRecipeSelectStruct[i+1].Name;
		
		IF len(gRecipeSelectStruct[i+1].Name)>0 THEN
			gRecipeNameMax:=INT_TO_UDINT(i)+1;
		END_IF
	END_IF
END_FOR

FOR  i:=1 TO gRecipeSelctMaxIndex DO
	gRecipeNameSelectShow[i]:=gRecipeNameSelect[i];
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Action Name="VersionLog" Id="{bf44f477-db82-4ec8-a515-d40bbb1816c2}">
      <Implementation>
        <ST><![CDATA[(*
版本: V1.0.0.0 20241012  CPH
说明:
	1. 首个版本
(**************************************************)
版本: V1.0.0.1
说明:
	1. 增加参数备份文件，文件名以原文件名+时间命名
(**************************************************)
*)]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="RecipeNameModule_EX">
      <LineId Id="50" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="112" Count="15" />
      <LineId Id="58" Count="0" />
      <LineId Id="180" Count="1" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.createDir">
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="3" />
      <LineId Id="22" Count="2" />
      <LineId Id="87" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="88" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="102" Count="2" />
      <LineId Id="99" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="5" />
      <LineId Id="92" Count="0" />
      <LineId Id="48" Count="7" />
      <LineId Id="115" Count="8" />
      <LineId Id="45" Count="1" />
      <LineId Id="35" Count="8" />
      <LineId Id="106" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.data2String">
      <LineId Id="3" Count="4" />
      <LineId Id="29" Count="5" />
      <LineId Id="8" Count="3" />
      <LineId Id="44" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.deleteMethod">
      <LineId Id="3" Count="11" />
      <LineId Id="16" Count="3" />
      <LineId Id="87" Count="5" />
      <LineId Id="71" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="32" Count="31" />
      <LineId Id="2" Count="0" />
      <LineId Id="100" Count="5" />
      <LineId Id="99" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.deleteSlector">
      <LineId Id="23" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.getSystemTime">
      <LineId Id="3" Count="24" />
      <LineId Id="29" Count="3" />
      <LineId Id="45" Count="2" />
      <LineId Id="80" Count="0" />
      <LineId Id="73" Count="6" />
      <LineId Id="35" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.getValue">
      <LineId Id="31" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="32" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.init">
      <LineId Id="3" Count="5" />
      <LineId Id="54" Count="5" />
      <LineId Id="9" Count="11" />
      <LineId Id="88" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="22" Count="25" />
      <LineId Id="2" Count="0" />
      <LineId Id="66" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.readMethod">
      <LineId Id="3" Count="10" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="9" />
      <LineId Id="74" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="88" Count="1" />
      <LineId Id="95" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="100" Count="6" />
      <LineId Id="99" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="121" Count="1" />
      <LineId Id="19" Count="7" />
      <LineId Id="119" Count="1" />
      <LineId Id="27" Count="42" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.saveMethod">
      <LineId Id="3" Count="12" />
      <LineId Id="67" Count="0" />
      <LineId Id="16" Count="4" />
      <LineId Id="76" Count="1" />
      <LineId Id="21" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="78" Count="1" />
      <LineId Id="28" Count="2" />
      <LineId Id="72" Count="0" />
      <LineId Id="31" Count="32" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.setValue">
      <LineId Id="38" Count="0" />
      <LineId Id="31" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.string2Data">
      <LineId Id="3" Count="4" />
      <LineId Id="30" Count="5" />
      <LineId Id="8" Count="15" />
      <LineId Id="45" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="86" Count="3" />
      <LineId Id="105" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="221" Count="9" />
      <LineId Id="219" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="1" />
      <LineId Id="117" Count="0" />
    </LineIds>
    <LineIds Name="RecipeNameModule_EX.VersionLog">
      <LineId Id="2" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="42" Count="4" />
      <LineId Id="20" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>