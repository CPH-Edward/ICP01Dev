<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FuncModule_RS485_MFC" Id="{bd124369-11e3-4139-8b55-2d4f5eb5800b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM FuncModule_RS485_MFC
VAR_INPUT
	serialExcute				:BOOL;// RS485开始一次参数读取
	setExcute					:BOOL;// RS485
	readExcute					:BOOL;// RS485
	serialSlaveID				:UDINT:=1;// 从站节点号
	sendLenght					:UINT:=14;// 发送字节长度
	sendbyte					:ARRAY[1..20]			OF		BYTE;(*READ*)//发送数据
	timeout						:TIME:=T#100MS;// 超时时间
	setPoint					:UDINT;
	loopReadStep				:INT;
	loopReadExcute				:BOOL;
	loopReadIntervalTime		:UDINT:=0;
END_VAR
VAR_OUTPUT
	serialBusy						:BOOL;
	setPresetBusy					:BOOL;
	serialDone						:BOOL;
	serialError						:BOOL;
	serialConnected					:BOOL;
	setBusy							:BOOL;// 设置参数时繁忙
	setError						:BOOL;
	setDone							:BOOL;
	readBusy						:BOOL;// 读取参数时繁忙
	readError						:BOOL;
	readDone						:BOOL;
	readID							:BOOL;
END_VAR
VAR
	
	prefix						:STRING:='';// 字符串头
	suffix						:STRING:= '';// 字符串尾
	readsetStarIndex				:INT;
	readsetPointStarIndex				:INT;
	readsetPointEndIndex				:INT;
	readsetPointStr				:STRING;
	readPointStr				:STRING;
	readIDStr					:STRING;
	readPointReal				:LREAL;
	readPointInt				:UDINT;
	
	readIDInt							:UDINT;
	//Byte方式
	send1:							SendData;
	receive1:						ReceiveString;
	Timer1:							TON;
	TimerSetPreset:							TON;
	TimerReadPreset:							TON;
	t1:								TON;
	arr_SendData:					ARRAY[1..20]			OF		BYTE;(*READ*)//发送数据
	arr_SendDataTemp				:ARRAY[1..20]			OF		BYTE;(*READ*)//发送数据
	arr_RcvDataString:				STRING;// 接收数据
	arr_RcvDataStringTemp:				STRING;// 接收数据
	arr_RcvDataStringClear:			STRING;// 清除接收数据
	RcvDataFlag:			BOOL;// 接收数据标志位
	serialStep						:UINT;				//处理步数
	setPresetStep					:UINT;				//处理步数
	readflowStep					:UINT;				//处理步数
	serialTimeOut:BOOL;//接收数据超时
	serialRecError:BOOL;//接收数据错误
	reciveFtrig:F_TRIG;
	recTon:TON;
	againSendS3:TON;
	hexChars:ARRAY [0..15] OF STRING[1]:=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
 *功能块的作用，把 TxBuffer 缓存区的数据经过 Process Data 的 ComOut 发送出去，
 *而把 ComIn 中的数据接收到 RxBuffer。引用这个功能块的程序执行周期越短，
 *数据交换的效率就越高，所以这段程序应该放在快速任务中作为 Backgroud 代码无条件执行。
*)
IF receive1.Error <> COMERROR_NOERROR THEN
	serialRecError:=TRUE;
END_IF
receive1(
	Prefix:= prefix, 
	Suffix:= suffix, 
	Timeout:=timeout , 
	Reset:= , 
	StringReceived=> , 
	Busy=> , 
	Error=> , 
	RxTimeout=> , 
	ReceivedString:= arr_RcvDataStringTemp, 
	RXbuffer:=gRxBuffer_MFC );

//testReal:=BYTE_TO_REAL(arr_RcvData_Temp);
//数据接收处理
recTon(IN:=RcvDataFlag, PT:=T#10MS);
IF recTon.Q THEN
	RcvDataFlag:=FALSE;
END_IF
reciveFtrig(CLK:=receive1.busy);
IF reciveFtrig.Q THEN
	arr_RcvDataString:=arr_RcvDataStringTemp;
	arr_RcvDataStringTemp:=arr_RcvDataStringClear;
	RcvDataFlag:=TRUE;
	serialConnected:=TRUE;
END_IF
againSendS3(IN:=NOT RcvDataFlag,PT:=T#5S);
IF againSendS3.Q THEN
	serialConnected:=FALSE;
	againSendS3(IN:=FALSE);
END_IF
ACT_Send();
ACT_Set();
ACT_Read();
ACT_MFCRead();]]></ST>
    </Implementation>
    <Action Name="ACT_MFCRead" Id="{af745ef9-47f4-4f89-8f3e-082bab9fb662}">
      <Implementation>
        <ST><![CDATA[IF NOT setBusy AND NOT serialBusy AND NOT readBusy AND NOT gMFCStopLoopRead THEN
	loopReadExcute:=TRUE;
END_IF
CASE loopReadStep OF
	0:
		IF loopReadExcute THEN
			loopReadExcute:=FALSE;
			loopReadStep:=10;
		END_IF
		t1(IN:=FALSE);
	10:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(1);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	20:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC1.connected:=TRUE;
			gICP.MFC1.connectedCount:=0;
			gICP.MFC1.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC1.actflow:=REAL_TO_UDINT(gICP.MFC1.actflowFloat);
			t1(IN:=FALSE);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC1.connectedCount:=gICP.MFC1.connectedCount+1;
			IF gICP.MFC1.connectedCount>10 THEN
				gICP.MFC1.connectedCount:=0;
				gICP.MFC1.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	30:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	40:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(2);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	50:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC2.connected:=TRUE;
			gICP.MFC2.connectedCount:=0;
			gICP.MFC2.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC2.actflow:=REAL_TO_UDINT(gICP.MFC2.actflowFloat);
			t1(IN:=FALSE);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC2.connectedCount:=gICP.MFC2.connectedCount+1;
			IF gICP.MFC2.connectedCount>10 THEN
				gICP.MFC2.connectedCount:=0;
				gICP.MFC2.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	60:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	70:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(3);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	80:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC3.connected:=TRUE;
			gICP.MFC3.connectedCount:=0;
			gICP.MFC3.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC3.actflow:=REAL_TO_UDINT(gICP.MFC3.actflowFloat);
			t1(IN:=FALSE);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC3.connectedCount:=gICP.MFC3.connectedCount+1;
			IF gICP.MFC3.connectedCount>10 THEN
				gICP.MFC3.connectedCount:=0;
				gICP.MFC3.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	90:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	100:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(4);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	110:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC4.connected:=TRUE;
			gICP.MFC4.connectedCount:=0;
			t1(IN:=FALSE);
			gICP.MFC4.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC4.actflow:=REAL_TO_UDINT(gICP.MFC4.actflowFloat);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC4.connectedCount:=gICP.MFC4.connectedCount+1;
			IF gICP.MFC4.connectedCount>10 THEN
				gICP.MFC4.connectedCount:=0;
				gICP.MFC4.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	120:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	130:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(5);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	140:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC5.connected:=TRUE;
			gICP.MFC5.connectedCount:=0;
			t1(IN:=FALSE);
			gICP.MFC5.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC5.actflow:=REAL_TO_UDINT(gICP.MFC5.actflowFloat);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC5.connectedCount:=gICP.MFC5.connectedCount+1;
			IF gICP.MFC5.connectedCount>10 THEN
				gICP.MFC5.connectedCount:=0;
				gICP.MFC5.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	150:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	160:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(6);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	170:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC6.connected:=TRUE;
			gICP.MFC6.connectedCount:=0;
			t1(IN:=FALSE);
			gICP.MFC6.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC6.actflow:=REAL_TO_UDINT(gICP.MFC6.actflowFloat);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC6.connectedCount:=gICP.MFC6.connectedCount+1;
			IF gICP.MFC6.connectedCount>10 THEN
				gICP.MFC6.connectedCount:=0;
				gICP.MFC6.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	180:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	190:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(7);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	200:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC7.connected:=TRUE;
			gICP.MFC7.connectedCount:=0;
			t1(IN:=FALSE);
			gICP.MFC7.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC7.actflow:=REAL_TO_UDINT(gICP.MFC7.actflowFloat);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC7.connectedCount:=gICP.MFC7.connectedCount+1;
			IF gICP.MFC7.connectedCount>10 THEN
				gICP.MFC7.connectedCount:=0;
				gICP.MFC7.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	210:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	220:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(8);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	230:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC8.connected:=TRUE;
			gICP.MFC8.connectedCount:=0;
			t1(IN:=FALSE);
			gICP.MFC8.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC8.actflow:=REAL_TO_UDINT(gICP.MFC8.actflowFloat);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC8.connectedCount:=gICP.MFC8.connectedCount+1;
			IF gICP.MFC8.connectedCount>10 THEN
				gICP.MFC8.connectedCount:=0;
				gICP.MFC8.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	240:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	250:
		IF NOT gMFCStopLoopRead THEN
			Interface_Read(9);
			t1(IN:=FALSE);
			loopReadStep:=loopReadStep+10;
		ELSE
			loopReadStep:=5000;
		END_IF
	260:
		IF readDone THEN
			loopReadStep:=loopReadStep+10;
			gICP.MFC9.connected:=TRUE;
			gICP.MFC9.connectedCount:=0;
			t1(IN:=FALSE);
			gICP.MFC9.actflowFloat:=ReadLLimit(LREAL_TO_REAL(readPointReal));
			gICP.MFC9.actflow:=REAL_TO_UDINT(gICP.MFC9.actflowFloat);
			RETURN;
		END_IF
		t1(IN:=TRUE,PT:=T#200MS);
		IF t1.Q THEN
			gICP.MFC9.connectedCount:=gICP.MFC9.connectedCount+1;
			IF gICP.MFC9.connectedCount>10 THEN
				gICP.MFC9.connectedCount:=0;
				gICP.MFC9.connected:=FALSE;
				loopReadStep:=loopReadStep+10;
			ELSE
				loopReadStep:=loopReadStep+10;
			END_IF
			t1(IN:=FALSE);
		END_IF
	270:
		t1(IN:=TRUE,PT:=UDINT_TO_TIME(loopReadIntervalTime));
		IF t1.Q THEN
			loopReadStep:=loopReadStep+10;
			t1(IN:=FALSE);
		END_IF
	280:
		loopReadStep:=5000;
	5000:
		loopReadStep:=0;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Read" Id="{06336347-ea51-4478-b7c6-db43bd3b478e}">
      <Implementation>
        <ST><![CDATA[CASE readflowStep OF
	0:
	IF readExcute THEN
		readExcute:=FALSE;
		IF NOT serialBusy AND NOT readBusy AND NOT setBusy THEN
			readflowStep:=90;
			readBusy:=TRUE;
			readError:=FALSE;
			readDone:=FALSE;
		END_IF
	END_IF
	TimerReadPreset(IN:= FALSE);
	;
	
	90:
		readflowStep:=110;
		Read_Flow();
	100:
		;
	110:
		readPointStr:='';
		IF RcvDataFlag THEN
			readsetStarIndex:=FIND(arr_RcvDataString,'@');
			readsetPointStarIndex:=FIND(arr_RcvDataString,'$02');
			readsetPointEndIndex:=FIND(arr_RcvDataString,'$03');
			readIDStr:=MID(arr_RcvDataString,readsetPointStarIndex-readsetStarIndex-1,readsetStarIndex+1);
			readPointStr:=MID(arr_RcvDataString,readsetPointEndIndex-readsetPointStarIndex-1,readsetPointStarIndex+1);
			// readflowStep:=readflowStep+10;
			readPointInt:=STRING_TO_UDINT(readPointStr);
			readPointReal:=STRING_TO_LREAL(readPointStr);
			readIDInt:=STRING_TO_UDINT(readIDStr);
			readID:=(readIDInt=serialSlaveID);
			readflowStep:=5000;
			RETURN;
		END_IF
		TimerReadPreset(IN:= NOT TimerReadPreset.q, PT:=T#200MS);
		IF TimerReadPreset.Q THEN
			readflowStep:=6000;
			TimerReadPreset(IN:= FALSE);
			RETURN;
		END_IF
//	120:
//		readPointInt:=STRING_TO_UDINT(readPointStr);
//		readPointReal:=STRING_TO_LREAL(readPointStr);
//		readflowStep:=1000;
//	1000:
//		TimerReadPreset(IN:= NOT TimerReadPreset.q, PT:=T#00MS);
//		IF TimerReadPreset.Q THEN
//			readflowStep:=5000;
//			TimerReadPreset(IN:= FALSE);
//			// sendstr:='';
//		END_IF
	;
	5000://done
		readBusy:=FALSE;
		readflowStep:=0;
		readError:=FALSE;
		readDone:=TRUE;
	;
	6000://error
		readBusy:=FALSE;
		readflowStep:=0;
		readError:=TRUE;
		readDone:=FALSE;
	;
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Send" Id="{630caf1c-4b2f-44fb-8a7e-038e05901ebf}">
      <Implementation>
        <ST><![CDATA[
CASE serialStep OF
	0:
	IF serialExcute THEN
		serialExcute:=FALSE;
		IF NOT serialBusy THEN
			serialStep:=90;
			serialBusy:=TRUE;
			serialDone:=FALSE;
			serialError:=FALSE;
			serialTimeOut:=FALSE;
			serialRecError:=FALSE;
		END_IF
	END_IF
	Timer1(IN:= FALSE);
	;
	
	90:
		arr_SendData:=sendbyte;
		serialStep:=100;
	100:
		send1(
			pSendData:= ADR(arr_SendData), 
			Length:= sendLenght, 
			Busy=> , 
			Error=> , 
			TXbuffer:= gTxBuffer_MFC);
		serialStep:=serialStep+10;
	110:
		Timer1(IN:= NOT timer1.q, PT:=T#10MS);
		IF Timer1.Q THEN
			serialStep:=serialStep+10;
			Timer1(IN:= FALSE);
		END_IF
	120:
		Timer1(IN:= NOT timer1.q, PT:=T#500MS);
		IF Timer1.Q THEN
			serialStep:=6000;
			Timer1(IN:= FALSE);
			serialTimeOut:=TRUE;
			RETURN;
		END_IF
		IF NOT send1.busy  THEN
			Timer1(IN:= FALSE);
			serialTimeOut:=FALSE;
			serialStep:=200;
		END_IF
		IF send1.Error <> COMERROR_NOERROR THEN
			serialRecError:=TRUE;
		END_IF
	200://数据处理
		serialStep:=serialStep+10;
	210:
		Timer1(IN:= NOT timer1.q, PT:=T#10MS);
		IF Timer1.Q THEN
			serialStep:=serialStep+10;
			Timer1(IN:= FALSE);
		END_IF
	220:
		//数据转换
		Timer1(IN:= FALSE);
		serialStep:=1000;
	
	1000:
		Timer1(IN:= NOT timer1.q, PT:=T#50MS);
		IF Timer1.Q THEN
			serialStep:=5000;
			Timer1(IN:= FALSE);
			// sendstr:='';
			serialTimeOut:=FALSE;
		END_IF
	;
	5000://done
		serialBusy:=FALSE;
		serialDone:=TRUE;
		serialError:=FALSE;
		serialStep:=0;
	;
	6000://error
		serialBusy:=FALSE;
		serialDone:=FALSE;
		serialError:=TRUE;
		serialStep:=0;
	;
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Set" Id="{21457796-ab0e-48dd-aa20-a19176211fe5}">
      <Implementation>
        <ST><![CDATA[CASE setPresetStep OF
	0:
	IF setExcute THEN
		IF NOT serialBusy AND NOT setBusy THEN
			setExcute:=FALSE;
			setPresetStep:=90;
			setBusy:=TRUE;
			setError:=FALSE;
			setDone:=FALSE;
		END_IF
	END_IF
	TimerSetPreset(IN:= FALSE);
	;
	
	90:
		IF NOT FuncModule_RS485_MFC.readBusy AND FuncModule_RS485_MFC.loopReadStep<10 THEN
			Set_Flow(setPoint);
			setPresetStep:=100;
		END_IF
	100:
		TimerSetPreset(IN:= NOT TimerSetPreset.q, PT:=T#0MS);
		IF TimerSetPreset.Q THEN
			setPresetStep:=setPresetStep+10;
			TimerSetPreset(IN:= FALSE);
		END_IF
	110:
		IF RcvDataFlag THEN
			setPresetStep:=setPresetStep+10;
		END_IF
		TimerSetPreset(IN:= NOT TimerSetPreset.q, PT:=T#1000MS);
		IF TimerSetPreset.Q THEN
			setPresetStep:=6000;
			TimerSetPreset(IN:= FALSE);
			RETURN;
		END_IF
	120:
		IF FIND(arr_RcvDataString,'OK')>0 THEN
			//setPresetStep:=setPresetStep+10;
			setPresetStep:=5000;
		ELSE
			setPresetStep:=6000;
		END_IF
	130:
		setPresetStep:=setPresetStep+10;
		setBusy:=TRUE;
		TimerSetPreset(IN:= FALSE);
	140:
		arr_RcvDataString:='';
		Read_SetFlow();
		setPresetStep:=setPresetStep+10;
	150:
		readsetPointStr:='';
		IF RcvDataFlag THEN
			readsetPointStarIndex:=FIND(arr_RcvDataString,'$02');
			readsetPointEndIndex:=FIND(arr_RcvDataString,'$03');
			readsetPointStr:=MID(arr_RcvDataString,readsetPointEndIndex-readsetPointStarIndex-1,readsetPointStarIndex+1);
			setPresetStep:=setPresetStep+10;
		END_IF
		TimerSetPreset(IN:= NOT TimerSetPreset.q, PT:=T#1000MS);
		IF TimerSetPreset.Q THEN
			setPresetStep:=6000;
			TimerSetPreset(IN:= FALSE);
			RETURN;
		END_IF
	160:
		IF (STRING_TO_UDINT(readsetPointStr)<>setPoint) THEN
			setPresetStep:=6000;
		ELSE
			setPresetStep:=1000;
		END_IF
	
	1000:
		TimerSetPreset(IN:= NOT TimerSetPreset.q, PT:=T#50MS);
		IF TimerSetPreset.Q THEN
			setPresetStep:=5000;
			TimerSetPreset(IN:= FALSE);
			// sendstr:='';
		END_IF
	;
	5000://done
		setBusy:=FALSE;
		setPresetStep:=0;
		setError:=FALSE;
		setDone:=TRUE;
	;
	6000://error
		setBusy:=FALSE;
		setPresetStep:=0;
		setError:=TRUE;
		setDone:=FALSE;
	;
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Method Name="CalASII_Byte" Id="{4034c91c-0201-41f4-b936-e1d7c3afd8ff}">
      <Declaration><![CDATA[METHOD CalASII_Byte : UDINT
VAR_INPUT
	date1:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF date1=10 THEN
	CalASII_Byte:=41;
END_IF
IF date1=11 THEN
	CalASII_Byte:=42;
END_IF
IF date1=12 THEN
	CalASII_Byte:=43;
END_IF
IF date1=13 THEN
	CalASII_Byte:=44;
END_IF
IF date1=14 THEN
	CalASII_Byte:=45;
END_IF
IF date1=15 THEN
	CalASII_Byte:=46;
END_IF
IF date1<10 THEN
	CalASII_Byte:=date1+30;
END_IF
IF date1>15 THEN
	CalASII_Byte:=date1+30;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Interface_Read" Id="{a93f6c56-9dec-45ad-b152-2f2b74f61bf0}">
      <Declaration><![CDATA[METHOD Interface_Read : BOOL
VAR_INPUT
	sID:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[serialSlaveID:=sID;
readExcute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Interface_Set" Id="{11bbcc0c-f6c5-41b0-b00c-9120fcbb3549}">
      <Declaration><![CDATA[METHOD Interface_Set : BOOL
VAR_INPUT
	_sID:UDINT;
	_setPoint:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[serialSlaveID:=_sID;
setPoint:=_setPoint;
setExcute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Read_Flow" Id="{845aefb8-ef0f-4c89-a0f4-d96f1d39e776}">
      <Declaration><![CDATA[METHOD Read_Flow : BOOL
VAR_INPUT

END_VAR
VAR
	sumq:UDINT;
	mod128:UDINT;
	intTemp:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sendLenght:=9;
sendbyte[1]:=16#40;
sendbyte[2]:=UDINT_TO_BYTE((serialSlaveID/10)+48);// 48十进制转换成16进制为30；事实上是加30
sendbyte[3]:=UDINT_TO_BYTE((serialSlaveID MOD 10)+48);
sendbyte[4]:=16#02;
sendbyte[5]:=16#52;
sendbyte[6]:=16#46;
sendbyte[7]:=16#56;
sendbyte[8]:=16#03;
sumq:=0;
FOR intTemp:=5 TO UINT_TO_INT(sendLenght)-1 DO
	sumq:=sumq+sendbyte[intTemp];
END_FOR
mod128:=sumq MOD 128;
sendbyte[9]:=UDINT_TO_BYTE(mod128);
serialExcute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Read_SetFlow" Id="{f55a91b8-93d1-4262-bcc3-450d1dcbc3e0}">
      <Declaration><![CDATA[METHOD Read_SetFlow : BOOL
VAR_INPUT
END_VAR
VAR
	sumq:UDINT;
	mod128:UDINT;
	intTemp:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sendLenght:=9;
sendbyte[1]:=16#40;
sendbyte[2]:=UDINT_TO_BYTE((serialSlaveID/10)+48);// 48十进制转换成16进制为30；事实上是加30
sendbyte[3]:=UDINT_TO_BYTE((serialSlaveID MOD 10)+48);
sendbyte[4]:=16#02;
sendbyte[5]:=16#52;
sendbyte[6]:=16#46;
sendbyte[7]:=16#43;
sendbyte[8]:=16#03;
sumq:=0;
FOR intTemp:=5 TO UINT_TO_INT(sendLenght)-1 DO
	sumq:=sumq+sendbyte[intTemp];
END_FOR
mod128:=sumq MOD 128;
sendbyte[9]:=UDINT_TO_BYTE(mod128);
serialExcute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadLLimit" Id="{d47bde41-4b57-4dba-8e37-6c5caa806653}">
      <Declaration><![CDATA[METHOD ReadLLimit : REAL
VAR_INPUT
	input:REAL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	LLimit:REAL:=0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF input<LLimit THEN
	ReadLLimit:=LLimit;
ELSE
	ReadLLimit:=input;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set_Flow" Id="{04606df4-24cc-43a4-b7a7-3f2eea04a0ba}">
      <Declaration><![CDATA[METHOD Set_Flow : BOOL
VAR_INPUT
	flow:UDINT;
END_VAR
VAR
	sumq:UDINT;
	mod128:UDINT;
	intTemp:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sendLenght:=14;
sendbyte[1]:=16#40;
sendbyte[2]:=UDINT_TO_BYTE((serialSlaveID/10)+48);// 48十进制转换成16进制为30；事实上是加30
sendbyte[3]:=UDINT_TO_BYTE((serialSlaveID MOD 10)+48);
sendbyte[4]:=16#02;
sendbyte[5]:=16#41;
sendbyte[6]:=16#46;
sendbyte[7]:=16#43;
sendbyte[8]:=UDINT_TO_BYTE((flow/100)+48);
IF sendbyte[8]>30 THEN
	sendbyte[9]:=UDINT_TO_BYTE((flow/10 MOD 10)+48);
ELSE
	sendbyte[9]:=UDINT_TO_BYTE((flow/10)+48);
END_IF
sendbyte[10]:=UDINT_TO_BYTE((flow MOD 10)+48);
sendbyte[11]:=16#2C;
sendbyte[12]:=16#42;
sendbyte[13]:=16#03;
sumq:=0;
FOR intTemp:=5 TO 13 DO
	sumq:=sumq+sendbyte[intTemp];
END_FOR
mod128:=sumq MOD 128;
sendbyte[14]:=UDINT_TO_BYTE(mod128);
serialExcute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FuncModule_RS485_MFC">
      <LineId Id="402" Count="4" />
      <LineId Id="416" Count="2" />
      <LineId Id="939" Count="9" />
      <LineId Id="938" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="891" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="1535" Count="2" />
      <LineId Id="1534" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="916" Count="1" />
      <LineId Id="920" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="1426" Count="0" />
      <LineId Id="918" Count="0" />
      <LineId Id="1190" Count="0" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1425" Count="0" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1035" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="1513" Count="0" />
      <LineId Id="1530" Count="0" />
      <LineId Id="1510" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.ACT_MFCRead">
      <LineId Id="1" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="311" Count="1" />
      <LineId Id="379" Count="2" />
      <LineId Id="11" Count="3" />
      <LineId Id="39" Count="1" />
      <LineId Id="739" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="33" Count="2" />
      <LineId Id="741" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="49" Count="1" />
      <LineId Id="450" Count="13" />
      <LineId Id="743" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="464" Count="15" />
      <LineId Id="482" Count="16" />
      <LineId Id="744" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="500" Count="14" />
      <LineId Id="517" Count="18" />
      <LineId Id="746" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="758" Count="0" />
      <LineId Id="537" Count="13" />
      <LineId Id="553" Count="18" />
      <LineId Id="748" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="573" Count="13" />
      <LineId Id="589" Count="18" />
      <LineId Id="750" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="609" Count="13" />
      <LineId Id="625" Count="18" />
      <LineId Id="752" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="761" Count="0" />
      <LineId Id="645" Count="13" />
      <LineId Id="661" Count="18" />
      <LineId Id="754" Count="0" />
      <LineId Id="680" Count="0" />
      <LineId Id="762" Count="0" />
      <LineId Id="681" Count="13" />
      <LineId Id="697" Count="18" />
      <LineId Id="756" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="763" Count="0" />
      <LineId Id="717" Count="13" />
      <LineId Id="733" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="305" Count="1" />
      <LineId Id="20" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.ACT_Read">
      <LineId Id="2" Count="5" />
      <LineId Id="12" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="13" Count="5" />
      <LineId Id="20" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="181" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="140" Count="4" />
      <LineId Id="139" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="63" Count="6" />
      <LineId Id="71" Count="2" />
      <LineId Id="76" Count="1" />
      <LineId Id="131" Count="1" />
      <LineId Id="78" Count="1" />
      <LineId Id="82" Count="1" />
      <LineId Id="129" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.ACT_Send">
      <LineId Id="2" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="8" Count="9" />
      <LineId Id="54" Count="49" />
      <LineId Id="105" Count="18" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.ACT_Set">
      <LineId Id="2" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="13" Count="5" />
      <LineId Id="146" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="86" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="134" Count="4" />
      <LineId Id="133" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="97" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="140" Count="4" />
      <LineId Id="139" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="125" Count="1" />
      <LineId Id="62" Count="7" />
      <LineId Id="71" Count="2" />
      <LineId Id="76" Count="1" />
      <LineId Id="131" Count="1" />
      <LineId Id="78" Count="1" />
      <LineId Id="82" Count="1" />
      <LineId Id="129" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.CalASII_Byte">
      <LineId Id="42" Count="22" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.Interface_Read">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.Interface_Set">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.Read_Flow">
      <LineId Id="50" Count="14" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.Read_SetFlow">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="34" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.ReadLLimit">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FuncModule_RS485_MFC.Set_Flow">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="9" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="31" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="34" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>